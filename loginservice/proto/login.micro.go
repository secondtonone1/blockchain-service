// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: login.proto

package loginproto

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
)

import (
	context "context"

	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for UsrLogin service

type UsrLoginService interface {
	Login(ctx context.Context, in *LoginReq, opts ...client.CallOption) (*LoginRsp, error)
	RegisterUsr(ctx context.Context, in *RegUsrReq, opts ...client.CallOption) (*RegUsrRsp, error)
}

type usrLoginService struct {
	c    client.Client
	name string
}

func NewUsrLoginService(name string, c client.Client) UsrLoginService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "loginproto"
	}
	return &usrLoginService{
		c:    c,
		name: name,
	}
}

func (c *usrLoginService) Login(ctx context.Context, in *LoginReq, opts ...client.CallOption) (*LoginRsp, error) {
	req := c.c.NewRequest(c.name, "UsrLogin.Login", in)
	out := new(LoginRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usrLoginService) RegisterUsr(ctx context.Context, in *RegUsrReq, opts ...client.CallOption) (*RegUsrRsp, error) {
	req := c.c.NewRequest(c.name, "UsrLogin.RegisterUsr", in)
	out := new(RegUsrRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UsrLogin service

type UsrLoginHandler interface {
	Login(context.Context, *LoginReq, *LoginRsp) error
	RegisterUsr(context.Context, *RegUsrReq, *RegUsrRsp) error
}

func RegisterUsrLoginHandler(s server.Server, hdlr UsrLoginHandler, opts ...server.HandlerOption) error {
	type usrLogin interface {
		Login(ctx context.Context, in *LoginReq, out *LoginRsp) error
		RegisterUsr(ctx context.Context, in *RegUsrReq, out *RegUsrRsp) error
	}
	type UsrLogin struct {
		usrLogin
	}
	h := &usrLoginHandler{hdlr}
	return s.Handle(s.NewHandler(&UsrLogin{h}, opts...))
}

type usrLoginHandler struct {
	UsrLoginHandler
}

func (h *usrLoginHandler) Login(ctx context.Context, in *LoginReq, out *LoginRsp) error {
	return h.UsrLoginHandler.Login(ctx, in, out)
}

func (h *usrLoginHandler) RegisterUsr(ctx context.Context, in *RegUsrReq, out *RegUsrRsp) error {
	return h.UsrLoginHandler.RegisterUsr(ctx, in, out)
}
